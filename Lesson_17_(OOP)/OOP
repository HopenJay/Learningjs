Object oriented programming is another style of programming.

How do we use it:
This is basically organizing our code into objects

Why do we use OOP:
OOP tries to represent the real world.
Easy to create multiple objectss

Example using cart:
In a real world a cart is a physical object, in oop we represent the physical obj in a digital way.

In simplicity because of oop representing the real world in a digital way, it makes the code more intuitive and easier to understand.

Another reason why we use OOP is that it's easy to create multiple objects.

Note: In object oriented programming the naming convention is to use PascalCase. In PascalCase you start every word with a capital letter.

27/08/2025: An even better way to generate object.
Object oriented rogramming have a feature called a class. A class is specifically designed for generatiog object. A class is basically an object generator.A class is defined as the blueprint of an object.

Note: Each object generated from a class is called an instance of the class. In js we can also check if an object is an instance of a class using the code. SYNTAX: object instanceOf class

Note to self: Don't worry or be discouraged if classes are a bit to confusing at first. Just remember:
Object-Oriented Programming = organizing our code into objects(tries to represent the real world)

Class = help us generate these objects/basically an object generator.

Benefit of Classes:
i). A class looks like the object that it generates.
ii). Cleaner than using a function.
iii). Classes have extra features for Object-oriented Programming.
First feature is caled a constructor, this let's us run a setup code after generating an object, a constructor let's us put code inside a class.

Note: The constructor method runs like a normal method, we can put code inside and it'll run the code, but the special thing about a constructor is that when we generate an object it will run the constructor automatically, so it's a great place to put setup code.

More details about constructor:
i). Has to be named 'constructor'
ii). Should not return anything
A short cut that can be used in class is that if we have a property that is = undefined, we can actually remove the = undefine and just leave the property name and don't forget to use a semi-colon.

In short and siimple term a class is just a better way to generate objects in object-oriented programming

Private Properties and Methods:
A private method or property means that method or property can only be accessed inside the class. And can't be changed later on from outside the class.

To make a property or method private or u need to do is make '#' it's prefix or write '#' before the property or method. e.g. '#private'. And properties or method without the '#' keys are public.

Note: A field is the same thing as a property. Why it's important to note is that chrome console, calls it a field.

29/08/2025: 
Another feature of object oriened programming:
Inheritance: This lets us reuse code between classes. This is a feature of oop that allows one class to get all the properties and methods from another class, so we don't have to copy and paste codes.

NOTE: To use inheritance in js after the class name, you give it the word 'extends' then the parent class you want to inherit from.

NOTE: We use inheritance when we have one class that is a more specific type of another class.

A function used in inheritance that is super useful is called 'super()', this basically calls the constructor of the parent class.

Note: When you don't create a constructor when using inheritance by default it will run the parent constructor.

Note: Discriminator property tells us which type{inheritance} to convert our classes into.

Methd overriding overrides or replaces the parent class with a same method that is in the children class.
If you need to use the parent method of that same named method in your method, you can do that by calling 'super().mmethodName'.

Polymorphism: Which means we can use a method wiithout needing to know which class it is. It's sort of an alternative to doing if statements. It's just essentially having same method and letting the method decide waht to do in each class call case.

Built-in classes: Classes that are provided by the language. Exampel in js: Date().
This class basically provides us wih date information.

More details about 'this':
i). It let's an object access it's own properties.
ii). It can be used anywhere in our code. NOTE: In module 'this' used outside of a object or a function is = undefined. Originally 'this' used after any of that is = Window
iii). When we're creating an object. But this will bw undefined. SYNTAX: const obj2 = {
    a:2,
    b: this.a
}; 'this' will return undefined cause obj2 have not been created yet at that point of the code.

NOTE: If we're inside a method we can use 'this' and it will point to a object. If we're outside of a method there's no object to point to and this will be undefined.
iii). We can use 'this' inside a function. SYNTAX: 
function logThis () {
    console.log(this);
}; We're not inside an object so there's nothing for 'this to point to, so it will return undefined. But however, it has a special feature, when we are inside a function we can change 'this' to whatever we want using a method called '.call' SYNTAX: logThis.call('hello); what we give to .call is going to be the value of this. So that's a special feature of this, inside a function, we can change 'this' to whatever we want using the .call method.
iv). Arrow functions do not change the value of 'this'. Basically 'this' doesn't really work with arrow function except through invocation. That is calling it from inside another function. SYNTAX: const obj3 = {
    method: () => {
        console.log(this);
    }
};
obj3.method(); is = undefined.

NOTE: The reasons why arrow functions are desgned like this is because javascript had a common problem in the past concerning that particular issue. When you're inside a method 'this' points to the object but when you try to do a for Each loop or basically anything involving function callback 'this' points to undefined because it's calling from the function. Hence why arrow function do not change the value of 'this'.

Summary of what I learnt about this:
i). Inside a method, 'this' points to the outer object
ii). Inside a function, 'this' = undefined, but can be changed using something like .call()
iii). Arrow functions do not change the value of 'this'.

Note to self: Between OOP and procedural programming, it's up to me to decide which I prefer to use in js. But important fact to note OOP is more popular in other languges so it's still useful to know incase I want to work with other programming languafes in the future.

NOTE: General rule

If a class extends another class, all instance properties initialized by the parent (constructor or class fields) are available in the child. You access them via this, just like any other property. And it's also the same for ethods